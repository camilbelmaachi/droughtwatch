{"ast":null,"code":"var _jsxFileName = \"/Users/camilbelmaachi/code/claramartiny/droughtwatch/api/frontend/src/RadioButton.tsx\";\nimport { BaseProvider, LightTheme } from \"baseui\";\nimport { Radio, RadioGroup } from \"baseui/radio\";\nimport React from \"react\";\nimport { Client as Styletron } from \"styletron-engine-atomic\";\nimport { Provider as StyletronProvider } from \"styletron-react\";\nimport { withStreamlitConnection, StreamlitComponentBase, Streamlit } from \"streamlit-component-lib\"; // Initialize our Styletron engine\n\nconst engine = new Styletron(); // Style overrides for our Radio buttons\n\nconst radioOverrides = {\n  Root: {\n    style: ({\n      $isFocused\n    }) => ({\n      marginBottom: 0,\n      marginTop: 0,\n      paddingRight: \".53333rem\",\n      backgroundColor: $isFocused ? \"#f0f2f6\" : \"\",\n      borderTopLeftRadius: \".25rem\",\n      borderTopRightRadius: \".25rem\",\n      borderBottomLeftRadius: \".25rem\",\n      borderBottomRightRadius: \".25rem\"\n    })\n  }\n};\n\n/**\n * Radio Button example, using BaseUI.\n */\nclass RadioButton extends StreamlitComponentBase {\n  constructor(props) {\n    super(props); // Determine our initially selected index\n\n    this.render = () => {\n      const style = {\n        width: this.props.width\n      };\n      const label = String(this.props.args[\"label\"]);\n      let options = this.props.args[\"options\"];\n      let disabled = this.props.disabled;\n\n      if (options == null || options.length === 0) {\n        options = [\"No options to select.\"];\n        disabled = true;\n      }\n\n      return /*#__PURE__*/React.createElement(StyletronProvider, {\n        value: engine,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(BaseProvider, {\n        theme: LightTheme,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: style,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }\n      }, label), /*#__PURE__*/React.createElement(RadioGroup, {\n        onChange: this.onSelectionChanged,\n        value: this.state.selectedIndex.toString(),\n        disabled: disabled,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }\n      }, options.map((option, index) => /*#__PURE__*/React.createElement(Radio, {\n        key: index,\n        value: index.toString(),\n        overrides: radioOverrides,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 17\n        }\n      }, option))))));\n    };\n\n    this.onSelectionChanged = e => {\n      const index = parseInt(e.target.value, 10);\n      this.setState({\n        selectedIndex: index\n      }, () => {\n        // Get the option name at the selected index\n        const options = this.props.args[\"options\"];\n        const value = options != null && index < options.length ? options[index] : null; // Send our current value to Streamlit!\n\n        Streamlit.setComponentValue(value);\n      });\n    };\n\n    const _options = this.props.args[\"options\"];\n    const defaultValue = this.props.args[\"default\"];\n    let selectedIndex = 0;\n\n    if (_options != null && defaultValue != null) {\n      selectedIndex = _options.indexOf(defaultValue);\n\n      if (selectedIndex < 0) {\n        selectedIndex = 0;\n      }\n    }\n\n    this.state = {\n      selectedIndex\n    };\n  }\n\n}\n\nexport default withStreamlitConnection(RadioButton);","map":{"version":3,"sources":["/Users/camilbelmaachi/code/claramartiny/droughtwatch/api/frontend/src/RadioButton.tsx"],"names":["BaseProvider","LightTheme","Radio","RadioGroup","React","Client","Styletron","Provider","StyletronProvider","withStreamlitConnection","StreamlitComponentBase","Streamlit","engine","radioOverrides","Root","style","$isFocused","marginBottom","marginTop","paddingRight","backgroundColor","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","RadioButton","constructor","props","render","width","label","String","args","options","disabled","length","onSelectionChanged","state","selectedIndex","toString","map","option","index","e","parseInt","target","value","setState","setComponentValue","defaultValue","indexOf"],"mappings":"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","sourcesContent":["import { BaseProvider, LightTheme } from \"baseui\"\nimport { Radio, RadioGroup } from \"baseui/radio\"\nimport React from \"react\"\n\nimport { Client as Styletron } from \"styletron-engine-atomic\"\nimport { Provider as StyletronProvider } from \"styletron-react\"\nimport {\n  ComponentProps,\n  withStreamlitConnection,\n  StreamlitComponentBase,\n  Streamlit,\n} from \"streamlit-component-lib\"\n\n// Initialize our Styletron engine\nconst engine = new Styletron()\n\n// Style overrides for our Radio buttons\nconst radioOverrides = {\n  Root: {\n    style: ({ $isFocused }: { $isFocused: boolean }) => ({\n      marginBottom: 0,\n      marginTop: 0,\n      paddingRight: \".53333rem\",\n      backgroundColor: $isFocused ? \"#f0f2f6\" : \"\",\n      borderTopLeftRadius: \".25rem\",\n      borderTopRightRadius: \".25rem\",\n      borderBottomLeftRadius: \".25rem\",\n      borderBottomRightRadius: \".25rem\",\n    }),\n  },\n}\n\ninterface State {\n  /**\n   * The value specified by the user via the UI. If the user didn't touch this\n   * widget's UI, the default value is used.\n   */\n  selectedIndex: number\n}\n\n/**\n * Radio Button example, using BaseUI.\n */\nclass RadioButton extends StreamlitComponentBase<State> {\n  public constructor(props: ComponentProps) {\n    super(props)\n\n    // Determine our initially selected index\n    const options = this.props.args[\"options\"] as string[]\n    const defaultValue = this.props.args[\"default\"] as string\n    let selectedIndex = 0\n    if (options != null && defaultValue != null) {\n      selectedIndex = options.indexOf(defaultValue)\n      if (selectedIndex < 0) {\n        selectedIndex = 0\n      }\n    }\n\n    this.state = { selectedIndex }\n  }\n\n  public render = (): React.ReactNode => {\n    const style = { width: this.props.width }\n    const label = String(this.props.args[\"label\"])\n    let options = this.props.args[\"options\"] as string[]\n    let disabled = this.props.disabled\n\n    if (options == null || options.length === 0) {\n      options = [\"No options to select.\"]\n      disabled = true\n    }\n\n    return (\n      <StyletronProvider value={engine}>\n        <BaseProvider theme={LightTheme}>\n          <div style={style}>\n            <label>{label}</label>\n            <RadioGroup\n              onChange={this.onSelectionChanged}\n              value={this.state.selectedIndex.toString()}\n              disabled={disabled}\n            >\n              {options.map((option: string, index: number) => (\n                <Radio\n                  key={index}\n                  value={index.toString()}\n                  overrides={radioOverrides}\n                >\n                  {option}\n                </Radio>\n              ))}\n            </RadioGroup>\n          </div>\n        </BaseProvider>\n      </StyletronProvider>\n    )\n  }\n\n  private onSelectionChanged = (\n    e: React.ChangeEvent<HTMLInputElement>\n  ): void => {\n    const index = parseInt(e.target.value, 10)\n    this.setState({ selectedIndex: index }, () => {\n      // Get the option name at the selected index\n      const options = this.props.args[\"options\"] as string[]\n      const value =\n        options != null && index < options.length ? options[index] : null\n      // Send our current value to Streamlit!\n      Streamlit.setComponentValue(value)\n    })\n  }\n}\n\nexport default withStreamlitConnection(RadioButton)\n"]},"metadata":{},"sourceType":"module"}